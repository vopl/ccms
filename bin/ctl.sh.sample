#!/bin/bash
#http://www.permlug.org/node/5556

# Переменная содержит путь к рабочей директории процесса
BPATH="${PREFIX}"
# Имя пользователя, от которого должны запускаться процессы. Помни! Сильно кастрированный в правах пользователь - залог твоей безопасности!
USER="${USER}"

# А здесь хранится путь к некоей директории var, в которой будут содержаться наши логи, пид и лок файлы
VP="$BPATH/var"
LP="$BPATH/logs"
WP="$BPATH/bin"

# Функция проверяет, запущен ли процесс с именем, переданным параметром. Если запущен, возвращает 0, в противном случае 1. Не логично? Конечно! Мы же используем stderr!
# Usage: chk 
function chk()
{
	if [ -f "$VP/$1.pid" ]; then   # Смотрим, существует ли пид файл
			TPID=`cat $VP/$1.pid`;
	fi
	
	if [ -n "$TPID" ]; then
			TPID="$( ps -A | grep "^ *$( cat $VP/$1.pid) " )"  # Если существует, проверяем, запущен ли процесс с пидом, хранящемся в этом файле
	else
			return 1
	fi
	
	if [ -n "$TPID" ]; then  # Если в этой переменной что-то есть, т.е. процесс запущен, то возвращаем 0
			return 0
	else # А если не запущен, то 1.
			return 1
	fi
}

# Функция для запуска. 1-й параметр - имя процесса, второй - его описание для красоты в stdout :)
# Usage: fstop  [long name]
function fstart() {
        if [ -z "$2" ]; then # Если описания нет, то берём в качестве описания имя процесса
                LNAME="$1"
                else
                LNAME="$2"
                fi
        if [ -n "$1" ]; then # Нам нужен хотя бы один параметр - имя процесса
                SNAME="$1"
                echo "Starting $LNAME module..."
                if chk $SNAME; then # Если процесс уже запущен, грязно ругаемся на пользователя
                        echo Another $LNAME process is already running...
                        else # Если нет, то запускаем по-феншую, как и обещали
                        /usr/local/sbin/daemonize -v -c "$WP" -e "$LP/err_$SNAME.log" -o "$LP/out_$SNAME.log" -p "$VP/$SNAME.pid" -l "$VP/$SNAME.lock" -u "$USER" -v "$WP"/$SNAME
                        if chk $SNAME; then # Проверяем снова. Процесс таки запустился?
                                echo $LNAME started successfully... # Всё хорошо, юзер, спи спокойно. :)
                                else 
                                echo $LNAME start failed! See $VP/err_$SNAME.log for more information. # Шеф, всё пропало! Надо послать юзера на в лог.
                                exit 1 # Выходим тоже по-феншую, указывая, что завершились фейлом
                                fi
                        fi
                fi
       }

function fwait()
{
    while [ 1 ]; do
	stat1="$( ps -p $1|grep $1 )"
	if [ "$stat1" ]; then
	    echo wait pid $1
	    sleep 1
	else
	    break
	fi
    done
}

# Тут аналогичная функция для останова. Хорошая, пушистая. Умеет подтирать локи и пиды за собой.
# Usage: fstop  [long name]
function fstop() {
        if [ -z "$2" ]; then
                LNAME="$1"
                else
                LNAME="$2"
                fi
        if [ -n "$1" ]; then
                SNAME="$1"
                echo "Stopping "$LNAME" process..."
                if chk $SNAME; then
                        kill "$( cat "$VP/$SNAME.pid" )"
                        fwait "$( cat "$VP/$SNAME.pid" )"
                        if chk $SNAME; then
                                echo "$LNAME stopping failed!"
                                else
                                echo Removing lock file...
                                rm -f $VP/$SNAME.lock
                                echo Removing pid file...
                                rm -f $VP/$SNAME.pid
                                echo Main bot stopped successfully...
                                fi
                        else
                        echo The "$LNAME" process not running!
                        fi
                else
                echo Error stopping some process. Not enough parameters.
                exit 1
                fi
        }

# Функция, проверяющая статус запущенных процессов. С функцией chk это очень просто.
# Usage: fstatus  [long name]
function fstatus() {
	if [ -z "$2" ]; then
		LNAME="$1"
		else
		LNAME="$2"
		fi
	if [ -n "$1" ]; then
		SNAME="$1"
 		if chk $SNAME; then
			echo "$LNAME" is working...
			else
			echo "$LNAME" is done...
			fi
		else
		echo Not enough parameters!
		exit 1
		fi
	}

# С вот этого места начинаем наслаждаться результатом. Научились ездить на велосипеде и теперь это нам даётся легко и просто. 
#Если мне надо добавить ещё транспорт аськи например, то для этого вполне достаточно двух строчек в start и stop. Да и переправить скрипт для другого приложения тоже довольно просто.

case "$1" in
        start) 
                fstart entry "server"
                ;;
        stop)
                fstop entry "server"
                ;;
        stat*)
                fstatus entry "server"
                ;;
        restart)
                $0 stop && $0 start
                ;;
        *)
                echo "Usage: $0 {start|stop|status|restart}" >&2
                exit 1
                ;;
        esac

exit 0
