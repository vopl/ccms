#ifndef _ccms_magick_macroHelpers_hpp_
#define _ccms_magick_macroHelpers_hpp_


#include "router/execContext.hpp"
#include "scripter/jsObject.hpp"

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
#define IMTRY() try {

#define IMCATCH(code) }\
	catch(Magick::Error &e)\
	{\
		JS_ReportError(ecx()->_jsCx, "Error %s", e.what());\
		code;\
	}\
	catch(Magick::Warning &e)\
	{\
		JS_ReportError(ecx()->_jsCx, "Warning %s", e.what());\
		code;\
	}\
	catch(Magick::Exception &e)\
	{\
		JS_ReportError(ecx()->_jsCx, "Exception %s", e.what());\
		code;\
	}\
	catch(std::exception &e)\
	{\
		JS_ReportError(ecx()->_jsCx, "std::exception: %s", e.what());\
		code;\
	}\
	catch(...)\
	{\
		JS_ReportError(ecx()->_jsCx, "unknown imageMagick exception");\
		code;\
	}\
	//\









#include <js/jsapi.h>

namespace ccms{ namespace magick{

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	template <class TJsObject>
	TJsObject *jsobjFromJsv(jsval jsv)
	{
		JSObject *jso;
		if(!JS_ConvertArguments(ccms::ecx()->_jsCx, 1, &jsv, "o", &jso)) return false;
		TJsObject *obj = dynamic_cast<TJsObject *>(JsObject::thisObj(jso));

		return obj;
	}
}}

#endif
